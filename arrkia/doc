# Arrkia
Rei SDK and tools to create native GUI apps on QuantOS
Inspired by React components and React TSX. Components inspired by Chakra UI and Framer Motion
Syntax is scala-like and modules is based on sbt

## Features
- no semicolons, statements end in a newline character "\n" which is rendered as a newline in most text editors
- hook onto components and XML-like code with scala-like code to build complex components
- automatic modular system with directories, forces good use of structuring:
```dir
src/
    components/
        header.rei
        footer.rei
    index.rei
    pages/
        about.rei
        404.rei
    assets/
        visuals/
            Arrkia.gif
        fonts/
            Arrkia.ttf
        data/
            users.db
```
- builds for QuantOS native using ArcWM and Vulkano.
- does not build for browsers. We shouldnt be using the same language for two different things. If you want to build for the web, use JS, flutter or kotlin.

## Boilerplate Code
When you type `arrkia new <name>` you create an arrkia project in `<name>/`. It then creates the following structure:
```dir
src/
    components/
        stock.rei
    index.rei
    pages/
        about.rei
    assets/
        visuals/
            Arrkia.gif #react-like spinning icon
        fonts/
            Arrkia.ttf #verdana
        data/
            users.db #mongodb
package.toml #specify dependencies for your final product and build dependencies, install packages with `arrkia i <package_name>` from arrkia.io
package.lock #locks your depenencies. Will not update your deps until you run `arrkia deps update`
config.rei #configuration options to edit your project name and useful scripts. `arrkia run` will build and run your app in hot-reload mode. `arrkia build --release` will build your app in `build/<name>.app` for QuantOS.
build.rei #use build dependencies and hook onto first and second stage of build process to insert scripts in rei
```
Note the users.db is for storing user data. Uses a key-value store based on mongodb. You can use your own DB by editing `config.rei`.

## FFX Code
So you have something like:

```ffx
import arrkia.ffx

ComponentA() = {
    handleClick() = {

    }

    ret (
        <>
            <Heading>This is ComponentA</Heading>
            <Body>
                <Box color="white" backgroundColor="black">
                    Hi I am in a Box
                </Box>

                <Flex>

                </Flex>

            </Body>
        </>
    )
}

```
